{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Kebbie","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Welcome to the documentation of the <code>kebbie</code> package.</p> <p>TODO description</p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#latest-version","title":"Latest version","text":"<p>You can install the latest version of the package directly from PyPi with :</p> <pre><code>pip install kebbie\n</code></pre> <p>Hint</p> <p>If you want to install directly from Github, run : <pre><code>pip install git+https://github.com/FleksySDK/kebbie.git\n</code></pre></p>"},{"location":"#specific-version","title":"Specific version","text":"<p>You can install a specific version of the package (<code>0.1.0</code> in ths example) from PyPi with :</p> <pre><code>pip install kebbie==0.1.0\n</code></pre> <p>Hint</p> <p>If you want to install directly from Github, run : <pre><code>pip install git+https://github.com/FleksySDK/kebbie.git@v0.1.0\n</code></pre></p>"},{"location":"#local","title":"Local","text":"<p>You can also clone the repository locally and install it manually :</p> <pre><code>git clone https://github.com/FleksySDK/kebbie.git\ncd kebbie\npip install -e .\n</code></pre>"},{"location":"#extra-dependencies","title":"Extra dependencies","text":"<p>You can also install extras dependencies, for example :</p> <pre><code>pip install -e .[docs]\n</code></pre> <p>Will install necessary dependencies for building the docs.</p> <p>Hint</p> <p>If you installed the package directly from github, run : <pre><code>pip install \"kebbie[docs] @ git+https://github.com/FleksySDK/kebbie.git\"\n</code></pre></p> <p>List of extra dependencies :</p> <ul> <li><code>test</code> : Dependencies for running unit-tests.</li> <li><code>hook</code> : Dependencies for running pre-commit hooks.</li> <li><code>lint</code> : Dependencies for running linters and formatters.</li> <li><code>docs</code> : Dependencies for building the documentation.</li> <li><code>dev</code> : <code>test</code> + <code>hook</code> + <code>lint</code> + <code>docs</code>.</li> <li><code>all</code> : All extra dependencies.</li> </ul>"},{"location":"#contribute","title":"Contribute","text":"<p>To contribute, install the package locally (see Installation), create your own branch, add your code (and tests, and documentation), and open a PR !</p>"},{"location":"#pre-commit-hooks","title":"Pre-commit hooks","text":"<p>Pre-commit hooks are set to check the code added whenever you commit something.</p> <p>When you try to commit your code, hooks are automatically run, and if you code does not meet the quality required by linters, it will not be committed. You then have to fix your code and try to commit again !</p> <p>Important</p> <p>If you never ran the hooks before, install it with : <pre><code>pre-commit install\n</code></pre></p> <p>Info</p> <p>You can manually run the pre-commit hooks with : <pre><code>pre-commit run --all-files\n</code></pre></p>"},{"location":"#unit-tests","title":"Unit-tests","text":"<p>When you contribute, you need to make sure all the unit-tests pass. You should also add tests if necessary !</p> <p>You can run the tests with :</p> <pre><code>pytest\n</code></pre> <p>Info</p> <p>Tests are not included in the pre-commit hooks, because running the tests might be slow, and for the sake of developpers we want the pre-commit hooks to be fast !</p> <p>Info</p> <p>Pre-commit hooks will not run the tests, but it will automatically update the coverage badge !</p>"},{"location":"#documentation","title":"Documentation","text":"<p>When you contribute, make sure to keep the documentation up-to-date.</p> <p>You can visualize the documentation locally by running :</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"code_ref/","title":"kebbie","text":"<p>Dummy package content for <code>pytere</code>.</p>"},{"location":"code_ref/#kebbie.is_odd","title":"<code>is_odd(x)</code>","text":"<p>Function checking if a number is odd.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>Number to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the number is odd, False otherwise.</p> Source code in <code>kebbie/__init__.py</code> <pre><code>def is_odd(x: float) -&gt; bool:\n    \"\"\"Function checking if a number is odd.\n\n    Args:\n        x (float): Number to check.\n\n    Returns:\n        bool: True if the number is odd, False otherwise.\n    \"\"\"\n    return x % 2 == 1\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>TODO</p>"}]}